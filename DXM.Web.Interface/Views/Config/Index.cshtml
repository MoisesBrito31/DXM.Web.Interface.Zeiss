@model DXM.OEE.OEE;
@{
    ViewData["Title"] = "Index";
    int log = Model.tickLog / 60;
}

<style>
    input{
        max-width:180px;
    }
</style>

<div class="card-title mt-5 mb-5">
    <div class="row mb-5">
        <div class="col text-left">
            <h2>Configuração do DXM</h2>
        </div>

    </div>
    <div class="row mt-5">
        <div class="col">
            <span> @Model.DXM_Status</span>
        </div>
        <div class="col text-right">
            <button type="button" class="btn btn-primary" onclick="document.location.href='/config/download?arquivo=sb'">script Download</button>
            <button type="button" class="btn btn-primary" onclick="document.location.href='/config/download?arquivo=xml'">XML Download</button>
        </div>
    </div>
    <hr>
</div>




<div class="container-fluid">

    <div class="mb-4 mt-4">
        <label>DXM Endereço:</label>
        <div class="form-inline">
            <input type="text" id="endress" name="endress" value="@Model.DXM_Endress" class="mr-3 form-control" />
            <button class="btn btn-primary" type="button" onclick="altIp()">Salvar </button>
        </div>
    </div>

    <div class="mb-4  mt-4">
        <label for="linhas">TimeOut :</label>
        <div class="form-inline">
            <input type="number" class="mr-3 form-control" name="linhas" id="time" value="@Model.timeOut" />
            <button class="btn btn-primary " onclick="timeOutAltera()" type="button">Alterar</button>
        </div>
    </div>

    @if (Model.DXM_Status.Contains("Online"))
    {

        <div class="mb-4  mt-4">
            <label for="linhas">linhas:</label>
            <div class="form-inline">
                <input type="number" class="mr-3 form-control" name="linhas" id="linhas" value="@Model.quantidade" />
                <button class="btn btn-primary " onclick="linhaAltera()" type="button">Alterar</button>
            </div>
        </div>

        <div class="mb-4  mt-4">
            <label for="tickLog">intervalo entre logs(min)</label>
            <div class="form-inline">
                <input type="number" class="mr-3 form-control" name="tickLog" id="tickLog" value="@log" />
                <button class="btn btn-primary " onclick="tickAltera()" type="button">Alterar</button>
            </div>
        </div>

        int z = 0;
        for (int x = 0; x < Model.quantidade; x++)
        {
            z = x + 1;
            <div class="mb-4 mt-4">
                <label>Nome linha @z : </label>
                <div class="form-inline">
                    <input type="text" id="l @x" name="l @x" value="@Model.Linhas[x].nome" class="mr-3 form-control" />
                    <button class="btn btn-primary" type="button" onclick="altnome(@x)">Salvar </button>
                    <button class="btn btn-danger" type="button" onclick="zera(@x)">Zerar</button>
                </div>
            </div>
        }

        <div class="mb-4  mt-4">
            <div class="form-inline">
                <button class="btn btn-danger " onclick="zera(100)" type="button">Reset Geral</button>
            </div>
        </div>
        <!--
        <div class="mb-4 mt-4">
            <label class="mr-3">Emulador: </label>
            @if (Model.emulador == 0)
            {
                <button class="btn btn-primary" onclick="emula(@Model.emulador)" type="button">
                    <span id="emul" onclick="emula(@Model.emulador)">Iniciar emulador</span>
                </button>
            }
            else
            {
                <button class="btn btn-danger" onclick="emula(@Model.emulador)" type="button">
                    <span id="emul" onclick="emula(@Model.emulador)">Parar emulador</span>
                </button>
            }
        </div>
        -->

    }
</div>
    






<script>
    var data;
    var gage = []

    function altnome(valor) {
       
        var nome = document.getElementById(`l ${valor}`).value;
        var xhp = new XMLHttpRequest()

        xhp.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                var re = this.responseText
                setTimeout(document.location.reload(),2000)
            }
        }
        xhp.open("Get", `/Config/setLinhaNome?id=${valor}&valor=${nome}`);
        xhp.send();
    }

    function zera(valor) {

       
        var xhp = new XMLHttpRequest()

        xhp.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                var re = this.responseText
                setTimeout(document.location.reload(), 2000)
            }
        }
        xhp.open("Get", `/Config/zerarLinha?id=${valor}`);
        xhp.send();
    }

    function altIp() {
        
        var ip = document.getElementById("endress").value;       

        var xhp = new XMLHttpRequest()

        xhp.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                var re = this.responseText
                setTimeout(document.location.reload(), 2000)
            }
        }
        xhp.open("Get", `/Config/setIp?ip=${ip}`);
        xhp.send();
    }


    function linhaAltera() {
        var valor = document.getElementById("linhas").value
        var xhp = new XMLHttpRequest()

        xhp.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                var re = this.responseText
                setTimeout(document.location.reload(), 2000)
            }
        }
        xhp.open("Get", "/Config/setLinhas?valor=" + valor);
        xhp.send();
    }

    function timeOutAltera() {
        var valor = document.getElementById("time").value
        var xhp = new XMLHttpRequest()

        xhp.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                var re = this.responseText
                setTimeout(document.location.reload(), 2000)
            }
        }
        xhp.open("Get", "/Config/setTimeOut?valor=" + valor);
        xhp.send();
    }

    function tickAltera() {
        var valor = document.getElementById("tickLog").value
        var xhp = new XMLHttpRequest()

        xhp.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                var re = this.responseText
                setTimeout(document.location.reload(), 2000)
            }
        }
        valor=valor*60
        xhp.open("Get", "/Config/setTickLog?valor=" + valor);
        xhp.send();
    }

    function emula(valor) {

        if (valor == 0) {
            valor=1
        }
        else {
            valor=0
        }

        var xhp = new XMLHttpRequest()
        xhp.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                var re = this.responseText
                setTimeout(document.location.reload(), 2000)
            }
        }
        xhp.open("Get", "/Config/emula?valor="+valor);
        xhp.send();
    }


</script>
